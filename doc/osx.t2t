

= Building on MacOS X =

In this approach I will try to avoid as much as possible building dependencies
from source and rather use frameworks wherever possible. Dependencies could be 
installed from various sources (homebrew, MacPorts or conda).

"Universal", SDK and non-default arch builds require more complex options and
some fiddling with the system. It is best to stick with a single, default,
architecture build and follow these instructions for an initial build.
Included are notes for building on Mac OS X 10.13 (__High Sierra__) and 
Mac OS X 10.14 (__Mojave__).
(These names will be used throughout the instructions.)
Make sure to read each section completely before typing the first command you see.

__General note on Terminal usage:__  When I say "cd" to a folder in a Terminal,
it means type "cd " (without the quotes, make sure to type a space after) and
then type the path to said folder, then <return>.  A simple way to do this
without having to know and type the full path is, after type the "cd " part,
drag the folder (use the icon in its window title bar, or drag a folder from
within a window) from the Desktop to the Terminal, then tap <return>.

__Parallel Compilation:__ On multiprocessor/multicore Macs, it's possible to
speed up compilation, but it's not automatic.  Whenever you type "make" (but
NOT "make install"), instead type:

```
make -j [#cpus]
```

Replace [#cpus] with the number of cores and/or processors your Mac has.  On recent
models with hyperthreading processors this can be double the physical count of
processors and cores.

ie: Mac Pro "8 Core" model (2 quad core processors) = 8

ie: Macbook Pro i5 (hyperthreading) = 2 cores X 2 = 4

To find out how many CPUs you have available, run the following in Terminal:

```
/usr/sbin/sysctl -n hw.ncpu
```

which can be used in build shell scripts like:

```
make -j $(/usr/sbin/sysctl -n hw.ncpu)
```

__Note:__ if you get an error in parallel compilation, try removing the -j # flag,
so it's just 'make', or using a smaller number.  Sometimes make can hiccup on too
many threads.

== Install Developer Tools ==

Developer tools are not a part of a standard OS X installation. Xcode is available
as a download from the App Store. It's best to download the latest version compatible
with your system to get important updates fixing various issues. Make sure to
do a custom install and install the Unix Development or Command Line Tools option.

== Install Dependencies via homebrew ==

First, install brew from official repository:

https://brew.sh

add add OSGEO tap:

```
brew tap osgeo/osgeo4mac
```

Now install all dependencies

```
brew install fcgi
brew install git
brew install cmake
brew install ninja
brew install gsl
brew install sip
brew install bison
brew install flex
brew install pkg-config
brew install python
brew install qt
brew install pyqt
pip3 install python-dateutil
pip3 install cython
brew install osgeo/osgeo4mac/gdal2
brew link gdal2 --force
brew install openvpn
brew install szip
brew install hdf5
brew install scipy
brew install netcdf
brew install gsl
brew install exiv2
brew install osgeo/osgeo4mac/saga-gis-lts
brew install osgeo/osgeo4mac/postgis2
brew install pyqt5-webkit
brew install qca
brew install qtkeychain
brew install qscintilla2
brew install qwt
brew install qwtpolar
brew install qjson
brew install sqlite
brew install expat
brew install proj
brew install spatialindex
brew install postgresql
brew install libpq
brew install curl
brew install libzip
brew install libtasn1
brew install hicolor-icon-theme
brew install libiconv
brew install geos
brew install libspatialite
brew install openssl
brew install poppler
```

and few packages are optional

```
brew install gdal2-python
brew install numpy
brew install brewsci/bio/matplotlib
brew cask install XQuartz # requirement of grass7
brew install grass7
brew install gettext
brew install gpsbabel
brew install pyspatialite
brew install r
pip3 install owslib
pip3 install certifi
pip3 install chardet
pip3 install idna
pip3 install OWSLib
pip3 install cython
pip3 install pyproj
pip3 install python-dateutil
pip3 install pytz
pip3 install requests
pip3 install six
pip3 install urllib3
pip3 install coverage
pip3 install funcsigs
pip3 install future
pip3 install mock
pip3 install nose2
pip3 install pbr
pip3 install psycopg2
pip3 install PyYAML
pip3 install Jinja2
pip3 install MarkupSafe
pip3 install Pygments
pip3 install termcolor
pip3 install oauthlib
pip3 install pyOpenSSL
pip3 install numpy
pip3 install certifi
pip3 install chardet
pip3 install coverage
pip3 install cycler
pip3 install decorator
pip3 install exifread
pip3 install future
pip3 install gdal
pip3 install h5py
pip3 install httplib2
pip3 install idna
pip3 install ipython-genutils
pip3 install jinja2
pip3 install jsonschema
pip3 install jupyter-core
pip3 install kiwisolver
pip3 install markupsafe
pip3 install matplotlib
pip3 install mock
pip3 install mock
pip3 install nbformat
pip3 install networkx
pip3 install nose2
pip3 install numpy
pip3 install owslib
pip3 install pandas
pip3 install pbr
pip3 install pip
pip3 install plotly
pip3 install ply
pip3 install psycopg2
pip3 install pygments
pip3 install pyodbc
pip3 install pyparsing
pip3 install pypubsub
pip3 install pysal
pip3 install pytz
pip3 install pyyaml
pip3 install requests
pip3 install retrying
pip3 install scipy
pip3 install setuptools
pip3 install shapely
pip3 install simplejson
pip3 install six
pip3 install test
pip3 install tools
pip3 install traitlets
pip3 install urllib3
pip3 install xlrd
pip3 install xlwt
```

== Download QGIS source code ==

Unzip the QGIS source tarball to a working folder of your choice
(/usr/somewhere is not a good choice as it's hidden and requires root
privileges).  If you are reading this from the source, you've already done
this.

If you want to experiment with the latest development sources, go to the github
QGIS project page:

http://github.com/qgis/QGIS

It should default to the master branch.  Click the __Downloads__ button and
select __Download .tar.gz__. Double-click the tarball to unzip it.

//Alternatively//, install git from http://git-scm.com and do the following.

Make a specific repository directory somewhere, e.g. ~/QGIS/QGIS, and cd
into it. The following will read-only clone the master branch to the directory:

```
git init
git remote add -f -t master -m master qgisupstream git://github.com/qgis/QGIS.git
git merge qgisupstream

```

== Configure the build ==

CMake supports out of source build so we will create a 'build' dir for the
build process. OS X uses ${HOME}/Applications as a standard user app folder (it
gives it the system app folder icon).  If you have the correct permissions you
may want to build straight into your /Applications folder. The instructions
below assume you are building into a ${HOME}/Applications directory.

You have two interactive options for configuring the build: ccmake or run
Terminal commands. ccmake is a curses interface inside Terminal for CMake and
allows a tabular layout for viewing and editing ALL available QGIS source CMake
options. To get started initially run the Terminal method.

In a Terminal cd to the qgis source folder previously downloaded, then:

```
mkdir build
cd build
cmake -D CMAKE_INSTALL_PREFIX=~/Applications \
-D CMAKE_PREFIX_PATH="/usr/local/opt/qt5;/usr/local/opt/qt5-webkit;/usr/local/opt/qscintilla2;/usr/local/opt/qwt;/usr/local/opt/qwtpolar;/usr/local/opt/qca;/usr/local/opt/gdal2;/usr/local/opt/gsl;/usr/local/opt/geos;/usr/local/opt/proj;/usr/local/opt/libspatialite;/usr/local/opt/spatialindex;/usr/local/opt/fcgi;/usr/local/opt/expat;/usr/local/opt/sqlite;/usr/local/opt/flex;/usr/local/opt/bison;/usr/local/opt/libzip;/usr/local/opt/libtash1;/usr/local/opt/grass7" \
-D CMAKE_BUILD_TYPE=MINSIZEREL -D ENABLE_TESTS=FALSE \
..
```

__Note:__ Don't forget the .. on the last line, which tells CMake to look for the
source files in one directory up.

After the initial Terminal configure, you can use ccmake to make further changes:

```
cd build
ccmake ..
```

To build a local copy of the API docs (see API documentation section above):

```
-D WITH_APIDOC=TRUE \
```


__Mapserver note:__ To build the Mapserver add the following 
line before the last line in
the above configuration:

```
-D WITH_SERVER=TRUE \
```

== Building ==

Now we can start the build process (remember the parallel compilation note at
the beginning, this is a good place to use it, if you can):

```
make -j [#cpus]
```

If all built without errors you can then install it:

```
make install
```

or, for an /Applications build:

```
sudo make install
```

