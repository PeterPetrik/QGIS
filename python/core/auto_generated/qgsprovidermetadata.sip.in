/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/qgsprovidermetadata.h                                       *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.pl again   *
 ************************************************************************/









class QgsProviderMetadata
{
%Docstring
Holds data provider key, description, and associated shared library file or function pointer information.

Provider metadata refers either to providers which are loaded via libraries or
which are native providers that are included in the core QGIS installation
and accessed through function pointers.

For library based providers, the metadata class is used in a lazy load
implementation in QgsProviderRegistry.  To save memory, data providers
are only actually loaded via QLibrary calls if they're to be used.  (Though they're all
iteratively loaded once to get their metadata information, and then
unloaded when the QgsProviderRegistry is created.)  QgsProviderMetadata
supplies enough information to be able to later load the associated shared
library object.
%End

%TypeHeaderCode
#include "qgsprovidermetadata.h"
%End
  public:


    QgsProviderMetadata( const QString &_key, const QString &_description, const QString &_library );
%Docstring
Constructor for provider metadata

:param provider: key
:param provider: description
:param provider: plugin library name

.. deprecated:: QGIS 3.10
%End

    QgsProviderMetadata( const QString &_key, const QString &_description );
%Docstring
Constructor for provider metadata

:param _key: provider key
:param _description: provider description
%End

    QgsProviderMetadata( const QString &key, const QString &description, SIP_PYCALLABLE / AllowNone / );
%Docstring
Metadata for provider with direct provider creation function pointer, where
no library is involved.

.. versionadded:: 3.0

.. deprecated:: QGIS 3.10
%End
%MethodCode

    // Make sure the callable doesn't get garbage collected, this is needed because refcount for a2 is 0
    // and the creation function pointer is passed to the metadata and it needs to be kept in memory.
    Py_INCREF( a2 );

    Py_BEGIN_ALLOW_THREADS

    sipCpp = new QgsProviderMetadata( *a0, *a1, [a2]( const QString &dataSource, const QgsDataProvider::ProviderOptions &providerOptions ) -> QgsDataProvider*
    {
      QgsDataProvider *provider;
      provider = nullptr;
      PyObject *sipResObj;
      SIP_BLOCK_THREADS

      sipResObj = sipCallMethod( nullptr, a2, "DD", new QString( dataSource ), sipType_QString, nullptr, new QgsDataProvider::ProviderOptions( providerOptions ), sipType_QgsDataProvider_ProviderOptions, NULL );

      if ( sipResObj )
      {
        if ( sipCanConvertToType( sipResObj, sipType_QgsDataProvider, SIP_NOT_NONE ) )
        {
          int state0;
          int sipIsErr = 0;
          provider = reinterpret_cast<QgsDataProvider *>( sipConvertToType( sipResObj, sipType_QgsDataProvider, nullptr, SIP_NOT_NONE, &state0, &sipIsErr ) );
          if ( sipIsErr != 0 )
          {
            sipReleaseType( provider, sipType_QgsDataProvider, state0 );
            provider = nullptr;
          }
        }
      }
      SIP_UNBLOCK_THREADS
      return provider;
    } );

    Py_END_ALLOW_THREADS

%End

    virtual ~QgsProviderMetadata();

    QString key() const;
%Docstring
This returns the unique key associated with the provider

This key string is used for the associative container in :py:class:`QgsProviderRegistry`
%End

    QString description() const;
%Docstring
This returns descriptive text for the provider

This is used to provide a descriptive list of available data providers.
%End

    QString library() const;
%Docstring
This returns the library file name

This is used to QLibrary calls to load the data provider (only for dynamically loaded libraries)

.. deprecated:: QGIS 3.10
%End


    virtual void initProvider();
%Docstring
Initialize the provider

.. versionadded:: 3.10
%End

    virtual void cleanupProvider();
%Docstring
Cleanup the provider

.. versionadded:: 3.10
%End

    virtual QString fileVectorFilters( );
%Docstring
Builds the list of vector file filter strings

Queries for a list of supported vector formats
Suitable for use in a QFileDialog.getOpenFileNames() call.

.. versionadded:: 3.10
%End

    virtual QString fileRasterFilters( );
%Docstring
Builds the list of raster file filter strings

Queries for a list of supported raster formats
Suitable for use in a QFileDialog.getOpenFileNames() call.

.. versionadded:: 3.10
%End

    virtual void fileMeshFilters( QString &mesh, QString &datasets );
%Docstring
Builds the list of mesh file filter strings

Queries for a list of supported mesh formats; one list to be used for meshes
and also one for datasets. Suitable for use in a
QFileDialog.getOpenFileNames() call.

.. versionadded:: 3.10
%End

    virtual QgsDataProvider *createProvider( const QString *uri, const QgsDataProvider::ProviderOptions &options );
%Docstring
Class factory to return a pointer to a newly created QgsDataProvider object

.. versionadded:: 3.0
%End

    virtual QgsVectorLayerExporter::ExportError createEmptyLayer(
      const QString &uri,
      const QgsFields &fields,
      QgsWkbTypes::Type wkbType,
      const QgsCoordinateReferenceSystem &srs,
      bool overwrite,
      QMap<int, int> &oldToNewAttrIdxMap,
      QString &errorMessage,
      const QMap<QString, QVariant> *options );
%Docstring
Interface for data provider function related to vector layers

.. versionadded:: 3.10
%End

    virtual QgsRasterDataProvider *createRasterDataProvider(
      const QString &uri,
      const QString &format,
      int nBands,
      Qgis::DataType type,
      int width,
      int height,
      double *geoTransform,
      const QgsCoordinateReferenceSystem &crs,
      const QStringList &createOptions = QStringList() );
%Docstring
Interface for data provider function related to raster layers

.. versionadded:: 3.10
%End

    virtual QList<QPair<QString, QString> > *pyramidResamplingMethods();
%Docstring
Interface for data provider function related to raster layers

.. versionadded:: 3.10
%End

    virtual QVariantMap decodeUri( const QString &uri );
%Docstring
Decode URI

.. versionadded:: 3.10
%End

    virtual QList< QgsDataItemProvider * > *dataItemProviders() const;
%Docstring
Data item providers

.. seealso:: :py:func:`QgsProviderGuiMetadata.dataItemGuiProviders`

.. versionadded:: 3.10
%End

    virtual int listStyles( const QString &uri, QStringList &ids, QStringList &names,
                            QStringList &descriptions, QString &errCause );
%Docstring
Interface for data provider functions related to CRUD for layer styles

.. versionadded:: 3.10
%End

    virtual QString getStyleById( const QString &uri, QString styleId, QString &errCause );
%Docstring
Interface for data provider functions related to CRUD for layer styles

.. versionadded:: 3.10
%End

    virtual bool deleteStyleById( const QString &uri, QString styleId, QString &errCause );
%Docstring
Interface for data provider functions related to CRUD for layer styles

.. versionadded:: 3.10
%End

    virtual bool saveStyle( const QString &uri, const QString &qmlStyle, const QString &sldStyle,
                            const QString &styleName, const QString &styleDescription,
                            const QString &uiFileContent, bool useAsDefault, QString &errCause );
%Docstring
Interface for data provider functions related to CRUD for layer styles

.. versionadded:: 3.10
%End

    virtual QString loadStyle( const QString &uri, QString &errCause );
%Docstring
Interface for data provider functions related to CRUD for layer styles

.. versionadded:: 3.10
%End

    virtual bool createDb( const QString &dbPath, QString &errCause );
%Docstring
Interface for data provider functions related to data management (databases)

.. versionadded:: 3.10
%End

    virtual QgsTransaction *createTransaction( const QString &connString );
%Docstring
Interface for data provider functions related to data management (databases)

.. versionadded:: 3.10
%End


};

/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/qgsprovidermetadata.h                                       *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.pl again   *
 ************************************************************************/
